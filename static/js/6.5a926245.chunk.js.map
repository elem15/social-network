{"version":3,"sources":["components/Login/LiginForm.tsx","components/Login/LiginFormWithCaptcha.tsx","components/Login/Login.tsx","components/Login/LoginContainer.tsx"],"names":["LoginForm","reduxForm","form","handleSubmit","error","submitting","style","maxWidth","onSubmit","Field","name","type","label","component","renderInput","validate","required","maxLength33","className","s","formSummaryError","button","LoginFormWithCaptcha","Login","submit","values","props","userSignIn","email","password","rememberMe","captcha","unSubmit","userSignOut","this","isAuth","to","captchaURL","src","alt","React","Component","LoginContainer","connect","state","auth","serverMessage"],"mappings":"0RA8CeA,EAFGC,YAAU,CAACC,KAAM,SAAjBD,EAxB4B,SAAC,GAA2C,IAAzCE,EAAwC,EAAxCA,aAA0BC,GAAc,EAA1BC,WAA0B,EAAdD,OACvE,OACI,qBAAKE,MAAO,CAACC,SAAS,SAAtB,SACI,uBAAMC,SAAWL,EAAjB,UACI,8BACI,cAACM,EAAA,EAAD,CAAOC,KAAK,QAAQC,KAAK,QAAQC,MAAM,QAAQC,UAAWC,IAAaC,SAAU,CAACC,IAAUC,SAEhG,8BACI,cAACR,EAAA,EAAD,CAAOC,KAAK,WAAWC,KAAK,WAAWC,MAAM,WAAWC,UAAWC,IAAaC,SAAU,CAACC,IAAUC,SAEzG,gCACI,cAACR,EAAA,EAAD,CAAOC,KAAK,aAAaG,UAAU,QAAQF,KAAK,aADpD,kBAGA,8BACKP,GAAS,sBAAMc,UAAWC,IAAEC,iBAAnB,SAAsChB,MAEpD,8BACI,wBAAQc,UAAWC,IAAEE,OAArB,SAA6B,cAAC,IAAD,kCCUlCC,EAFcrB,YAAU,CAACC,KAAM,SAAjBD,EAzBiB,SAAC,GAA2C,IAAzCE,EAAwC,EAAxCA,aAA0BC,GAAc,EAA1BC,WAA0B,EAAdD,OACvE,OACI,8BACI,uBAAMI,SAAWL,EAAjB,UACI,8BACI,cAACM,EAAA,EAAD,CAAOC,KAAK,QAAQC,KAAK,QAAQC,MAAM,QAAQC,UAAWC,IAAaC,SAAU,CAACC,IAAUC,SAEhG,8BACI,cAACR,EAAA,EAAD,CAAOC,KAAK,WAAWC,KAAK,WAAWC,MAAM,WAAWC,UAAWC,IAAaC,SAAU,CAACC,IAAUC,SAEzG,8BACI,cAACR,EAAA,EAAD,CAAOC,KAAK,UAAUC,KAAK,OAAOC,MAAM,UAAUC,UAAWC,IAAaC,SAAU,CAACC,SAEzF,gCACI,cAACP,EAAA,EAAD,CAAOC,KAAK,aAAaG,UAAU,QAAQF,KAAK,aADpD,kBAGCP,GAAS,sBAAMc,UAAWC,IAAEC,iBAAnB,SAAsChB,IAChD,8BACI,wBAAQc,UAAWC,IAAEE,OAArB,SAA6B,cAAC,IAAD,kCCSlCE,E,4MAzBXC,OAAS,SAACC,GACN,EAAKC,MAAMC,WAAWF,EAAOG,MAAOH,EAAOI,SAAUJ,EAAOK,WAAYL,EAAOM,U,EAGnFC,SAAW,WACP,EAAKN,MAAMO,e,4CAGf,WACI,OAAIC,KAAKR,MAAMS,OACJ,cAAC,IAAD,CAAUC,GAAI,aAGrB,gCACI,uCAAeF,KAAKR,MAAMW,WACxB,cAAC,EAAD,CAAsB7B,SAAU0B,KAAKV,SACrC,cAAC,EAAD,CAAWhB,SAAU0B,KAAKV,SAG3BU,KAAKR,MAAMW,YAAc,8BAAK,qBAAKC,IAAKJ,KAAKR,MAAMW,WAAYE,IAAI,c,GApBhEC,IAAMC,WCKpBC,EAAiBC,aATC,SAACC,GACrB,MAAO,CACHT,OAAQS,EAAMC,KAAKV,OACnBE,WAAYO,EAAMC,KAAKR,WACvBS,cAAeF,EAAMC,KAAKC,iBAMhB,CAACnB,eAAYM,iBADRU,CACsBpB,GAE9BmB","file":"static/js/6.5a926245.chunk.js","sourcesContent":["import React from \"react\";\r\nimport s from '../../components/Common/InputField/FormsContorls.module.css'\r\nimport {Field, reduxForm} from 'redux-form'\r\nimport {renderInput} from \"../Common/InputField/FormsControls\";\r\nimport {maxLength33, required} from \"../../utils/validators\";\r\nimport {Button} from \"antd\";\r\n\r\n\r\ntype OwnPropsType = {\r\n    // captchaURL: string | null\r\n}\r\ntype MapStatePropsType = {\r\n    submitting: boolean\r\n    error: string\r\n\r\n}\r\ntype MapDispatchPropsType = {\r\n    handleSubmit: any\r\n}\r\ntype PropsType = OwnPropsType & MapStatePropsType & MapDispatchPropsType\r\nconst LoginFormContent: React.FC<PropsType> = ({ handleSubmit, submitting, error,  }) => {\r\n    return (\r\n        <div style={{maxWidth:'300px'}}>\r\n            <form onSubmit={ handleSubmit }>\r\n                <div>\r\n                    <Field name=\"email\" type=\"email\" label=\"Email\" component={renderInput} validate={[required, maxLength33]}/>\r\n                </div>\r\n                <div>\r\n                    <Field name=\"password\" type=\"password\" label=\"password\" component={renderInput} validate={[required, maxLength33]}/>\r\n                </div>\r\n                <div>\r\n                    <Field name=\"rememberMe\" component='input' type=\"checkbox\"/> Remember Me\r\n                </div>\r\n                <div>\r\n                    {error && <span className={s.formSummaryError}>{error}</span>}\r\n                </div>\r\n                <div>\r\n                    <button className={s.button}><Button>Sign in</Button></button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst LoginForm = reduxForm({form: 'login'})(LoginFormContent)\r\n\r\nexport default LoginForm\r\n\r\n","import React from \"react\";\r\nimport s from '../../components/Common/InputField/FormsContorls.module.css'\r\nimport {Field, reduxForm} from 'redux-form'\r\nimport {renderInput} from \"../Common/InputField/FormsControls\";\r\nimport {maxLength33, required} from \"../../utils/validators\";\r\nimport {Button} from \"antd\";\r\n\r\n\r\ntype OwnPropsType = {\r\n    // captchaURL: string | null\r\n}\r\ntype MapStatePropsType = {\r\n    submitting: boolean\r\n    error: string\r\n\r\n}\r\ntype MapDispatchPropsType = {\r\n    handleSubmit: any\r\n}\r\ntype PropsType = OwnPropsType & MapStatePropsType & MapDispatchPropsType\r\nconst LoginFormContent: React.FC<PropsType> = ({ handleSubmit, submitting, error,  }) => {\r\n    return (\r\n        <div>\r\n            <form onSubmit={ handleSubmit }>\r\n                <div>\r\n                    <Field name=\"email\" type=\"email\" label=\"Email\" component={renderInput} validate={[required, maxLength33]}/>\r\n                </div>\r\n                <div>\r\n                    <Field name=\"password\" type=\"password\" label=\"password\" component={renderInput} validate={[required, maxLength33]}/>\r\n                </div>\r\n                <div>\r\n                    <Field name=\"captcha\" type=\"text\" label=\"AntiBot\" component={renderInput} validate={[required]}/>\r\n                </div>\r\n                <div>\r\n                    <Field name=\"rememberMe\" component='input' type=\"checkbox\"/> Remember Me\r\n                </div>\r\n                {error && <span className={s.formSummaryError}>{error}</span>}\r\n                <div>\r\n                    <button className={s.button}><Button>Sign in</Button></button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n//// @ts-ignore\r\nconst LoginFormWithCaptcha = reduxForm({form: 'login'})(LoginFormContent)\r\n\r\nexport default LoginFormWithCaptcha\r\n\r\n","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport LoginForm from \"./LiginForm\";\r\nimport LoginFormWithCaptcha from \"./LiginFormWithCaptcha\";\r\n\r\ntype OwnPropsType = {}\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n    captchaURL: string | null\r\n}\r\ntype MapDispatchPropsType = {\r\n    onSubmit: any\r\n    userSignIn:\r\n        (login: string, password: string, rememberMe: boolean, captcha: string | null) =>\r\n            void\r\n    userSignOut: () => void\r\n}\r\n// type valuesType = {email: string, password: string, rememberMe: boolean, captcha: string | null}\r\n\r\ntype PropsType = OwnPropsType & MapStatePropsType & MapDispatchPropsType\r\n\r\nclass Login extends React.Component<PropsType> {\r\n    submit = (values: any) => {\r\n        this.props.userSignIn(values.email, values.password, values.rememberMe, values.captcha)\r\n\r\n    }\r\n    unSubmit = () => {\r\n        this.props.userSignOut()\r\n    }\r\n\r\n    render() {\r\n        if (this.props.isAuth) {\r\n            return <Redirect to={'/Profile'}/>\r\n        }\r\n        return (\r\n            <div>\r\n                <h1>Login</h1>{this.props.captchaURL\r\n                ? <LoginFormWithCaptcha onSubmit={this.submit}/>\r\n                : <LoginForm onSubmit={this.submit}/>\r\n            }\r\n\r\n                {this.props.captchaURL && <div><img src={this.props.captchaURL} alt=\"\"/></div>}\r\n            </div>)\r\n    }\r\n}\r\n\r\n// <LoginForm onSubmit={this.submit} captchaURL={this.props.captchaURL}/> - didn't admit type\r\nexport default Login\r\n\r\n","import {AppStateType} from \"../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {userSignIn, userSignOut} from \"../../redux/auth-reducer\";\r\nimport Login from \"./Login\";\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n    captchaURL: string | null\r\n    serverMessage: string | null\r\n}\r\ntype MapDispatchPropsType = {\r\n}\r\ntype OwnPropsType = {\r\n}\r\ntype PropsType = OwnPropsType & MapStatePropsType & MapDispatchPropsType\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType): PropsType =>{\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        captchaURL: state.auth.captchaURL,\r\n        serverMessage: state.auth.serverMessage\r\n    }\r\n}\r\n\r\n// const userSignIn = (email: string, password: string, rememberMe: string, captcha: string) => console.log(email, password, rememberMe, captcha)\r\nconst LoginContainer = connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, AppStateType>\r\n(mapStateToProps, {userSignIn, userSignOut})(Login);\r\n\r\nexport default LoginContainer"],"sourceRoot":""}